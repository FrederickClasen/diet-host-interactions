%% MAIN 

%% PATHS 

addpath(genpath('/Volumes/lab-anastasioud/home/users/clasenf/Integration/'));      % path to directory
addpath(genpath('/Users/clasenf/GEM/Raven/'));                                     % RAVEN toolbox
addpath(genpath('/Users/clasenf/GEM/COBRA/'));                                     % COBRA toolbox
changeCobraSolver('mosek','all');
setRavenSolver('mosek');

%% IMPORT MODELS 

clear
genericWD = importExcelModel('GEM/Liver/genericLiverWD.xlsx',false);
genericCD = importExcelModel('GEM/Liver/genericLiverLFD.xlsx',false);
liverModel = importExcelModel('GEM/Liver/newModel.xlsx',false);
PT_T = importExcelModel('GEM/Liver/PT_T.xlsx',false);

rxnsToDelete = {'AATAi','HMR_6404','PSERT'};
genericWD = removeReactions(genericWD,rxnsToDelete,true,true,true);
genericCD = removeReactions(genericCD,rxnsToDelete,true,true,true);
liverModel = removeReactions(liverModel,rxnsToDelete,true,true,true);

model = genericWD;
counter = 0;
for i=1:length(model.rxns)
    if contains(model.rxns(i),'EXC')
        if model.ub(i) > 0 & model.ub(i) < 1000
            counter = counter + 1;
            dietRxns{counter} = model.rxns(i); 
        end
    end
end
dietRxns = dietRxns';

%% COHORT 1 

% some analyses done for cohort 1 is important since hypotheses generated
% follow up in cohort 2. Therefore the analyses can be run again here

experiment_name = 'cohort1_MMRN_Biomass_HMR_4464_KO';

% setup which analyses to run
FBA = 1;
sFBA = 1;
pFBA = 0;
writeFiles = 1;

% constraints on the model - internal, exchange and objective
constraint_struct.Eflux = {'nonDEN_Liver_CD.csv',...
                           'nonDEN_Liver_WD.csv',...
                           'DEN_Liver_CD.csv',...
                           'DEN_AdjLiver_WD.csv',...
                           'DEN_Tumour_WD.csv'};                     
constraint_struct.Exchange = {genericCD,...
                              genericWD};                      
constraint_struct.ModelNames = {'CD','WD','nonDEN_Liver_CD','nonDEN_Liver_WD'...
                                'DEN_Liver_CD','DEN_AdjLiver_WD','DEN_Tumour_WD'};
RERRxns = {'EXC_IN_C00007[s]',...
           'EXC_OUT_C00011[s]'};
objective = 'MMRN_Biomass';
nonObjective = {'HMR_biomass_Renalcancer(with ATP)',...
                'EXC_OUT_ATP',...
                'EXC_OUT_Lipid_pool_biomass',...
                'EXC_OUT_Protein_pool_biomass',...
                'EXC_OUT_Nucleotide_pool_biomass',...
                'EXC_OUT_cofactors_vitamins',...
                'EXC_OUT_glycogen'};
            
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% vectors and structures
modelNames = cell(0,12);
fluxVector = zeros(length(genericWD.rxns),12);
fluxVectorSparse = zeros(length(genericWD.rxns),12);
uptakeBlockVector = zeros(length(dietRxns),12);
pFBA_struct = struct();

counter = 1;
for i=1:length(constraint_struct.Exchange)
    model = constraint_struct.Exchange{i}; % - either genericCD or genericWD
    model = setParam(model,'obj',objective,1);
    model = setParam(model,'ub',objective,1000);
    model = setParam(model,'eq',nonObjective,0);
    modelNames{counter} = char('generic' + string(constraint_struct.ModelNames(i)));
    disp(modelNames{counter});
    % Diet block - measure glycerol production
%     blocked = blockDietRxns(model,dietRxns,'EXC_BOTH_C00116[s]');
%     uptakeBlockVector(:,counter) = blocked;
    model = setParam(model,'eq','HMR_4464',0);
    if FBA
        fba = solveLP(model,1);
        fluxVector(:,counter) = fba.x;
    end
    if sFBA
        sfba = optimizeCbModel(model,'max','zero');
        fluxVectorSparse(:,counter) = sfba.x;
    end
    if pFBA
        [GeneClasses, RxnClasses, ~] = pFBA(model, 'geneoption',0, 'tol',1e-7);
        pFBA_struct(counter).GeneClasses = GeneClasses;
        pFBA_struct(counter).RxnClasses = RxnClasses;
    end
    counter = counter + 1;
    for j=1:length(constraint_struct.Eflux)
        modelNames{counter} = char(string(constraint_struct.ModelNames(i)) + '_' + string(constraint_struct.ModelNames(j+2)));
        disp(modelNames{counter});
        tModel = constrainReactions(model,'GEM/Eflux/cohort1/'+string(constraint_struct.Eflux(j)),2.5);
        tModel = setParam(tModel,'eq','HMR_4464',0);
        if contains(constraint_struct.Eflux(j),'nonDEN')
            tModel = setParam(tModel,'lb',RERRxns,[15,11]);
        else
            tModel = setParam(tModel,'lb',RERRxns,[17,13]);
        end

        % Diet block - measure glycerol production
%         blocked = blockDietRxns(tModel,dietRxns,'EXC_BOTH_C00116[s]');
%         uptakeBlockVector(:,counter) = blocked;
        if FBA
            fba = solveLP(tModel,1);
            fluxVector(:,counter) = fba.x;
        end
        if sFBA
            sfba = optimizeCbModel(tModel,'max','zero');
            fluxVectorSparse(:,counter) = sfba.x;
        end
        if pFBA
            [GeneClasses, RxnClasses, ~] = pFBA(tModel, 'geneoption',0, 'tol',1e-7);
            pFBA_struct(counter).GeneClasses = GeneClasses;
            pFBA_struct(counter).RxnClasses = RxnClasses;
        end
        counter = counter + 1;
    end
end

% flux = fluxVectorSparse(getIndexes(genericWD,'HMR_5015','rxns'),:)';
% disp(flux);
% flux = fluxVector(getIndexes(genericWD,'HMR_5015','rxns'),:)';
% disp(flux);

%write the fluxVector to Excel spreadsheet
if writeFiles
    tempModel = genericWD;
    T = table(tempModel.rxns,...
              constructEquations(tempModel,tempModel.rxns,true),...
              tempModel.grRules,...
              tempModel.subSystems);
    T2 = array2table(fluxVector);
    T = [T T2];
    colheads = {'ID','EQUATION','GENEASSOCIATION','SUBSYSTEM'};
    colheads = [colheads modelNames];
    T.Properties.VariableNames = colheads;
    writetable(T,'output/FBA/FBA.xlsx','Sheet',experiment_name,'WriteVariableNames',true);
    
    tempModel = genericWD;
    T = table(tempModel.rxns,...
              constructEquations(tempModel,tempModel.rxns,true),...
              tempModel.grRules,...
              tempModel.subSystems);
    T2 = array2table(fluxVectorSparse);
    T = [T T2];
    colheads = {'ID','EQUATION','GENEASSOCIATION','SUBSYSTEM'};
    colheads = [colheads modelNames];
    T.Properties.VariableNames = colheads;
    writetable(T,'output/FBA/FBA.xlsx','Sheet',char(string(experiment_name) + string('_sparse')),'WriteVariableNames',true);
end

%% COHORT 2

% some analyses done for cohort 1 is important since hypotheses generated
% follow up in cohort 2. Therefore the analyses can be run again here

experiment_name = 'cohort2_MMRN_Biomass';

% setup which analyses to run
FBA = 1;
sFBA = 1;
pFBA = 0;
writeFiles = 1;

% constraints on the model - internal, exchange and objective
constraint_struct.Eflux = {'DEN_AdjLiver_fasted.csv',...
                           'DEN_AdjLiver_fed.csv',...
                           'DEN_Tumour_fasted.csv',...
                           'DEN_Tumour_fed.csv',...
                           'nonDEN_Liver_fasted.csv',...
                           'nonDEN_Liver_fed.csv'};                     
constraint_struct.Exchange = {genericWD};                      
constraint_struct.ModelNames = {'DEN_AdjLiver_fasted','DEN_AdjLiver_fed',...
                                'DEN_Tumour_fasted','DEN_Tumour_fed',...
                                'nonDEN_Liver_fasted','nonDEN_Liver_fed'};
RERRxns = {'EXC_IN_C00007[s]',...
           'EXC_OUT_C00011[s]'};
objective = 'MMRN_Biomass';
nonObjective = {'HMR_biomass_Renalcancer(with ATP)',...
                'EXC_OUT_ATP',...
                'EXC_OUT_Lipid_pool_biomass',...
                'EXC_OUT_Protein_pool_biomass',...
                'EXC_OUT_Nucleotide_pool_biomass',...
                'EXC_OUT_cofactors_vitamins',...
                'EXC_OUT_glycogen'};
            
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% vectors and structures
modelNames = cell(0,6);
fluxVector = zeros(length(genericWD.rxns),6);
fluxVectorSparse = zeros(length(genericWD.rxns),6);
pFBA_struct = struct();

counter = 1;
for i=1:length(constraint_struct.Exchange)
    model = constraint_struct.Exchange{i}; % - either genericCD or genericWD
    model = setParam(model,'obj',objective,1);
    model = setParam(model,'ub',objective,1000);
    model = setParam(model,'eq',nonObjective,0);
    for j=1:length(constraint_struct.Eflux)
        modelNames{counter} = char(string(constraint_struct.ModelNames(j)));
        disp(modelNames{counter});
        tModel = constrainReactions(model,'GEM/Eflux/'+string(constraint_struct.Eflux(j)),2.5);
        if contains(constraint_struct.Eflux(j),'nonDEN')
            tModel = setParam(tModel,'lb',RERRxns,[15,11]);
        else
            tModel = setParam(tModel,'lb',RERRxns,[17,13]);
        end

        if FBA
            fba = solveLP(tModel,1);
            fluxVector(:,counter) = fba.x;
        end
        if sFBA
            sfba = optimizeCbModel(tModel,'max','zero');
            fluxVectorSparse(:,counter) = sfba.x;
        end
        if pFBA
            [GeneClasses, RxnClasses, ~] = pFBA(tModel, 'geneoption',0, 'tol',1e-7);
            pFBA_struct(counter).GeneClasses = GeneClasses;
            pFBA_struct(counter).RxnClasses = RxnClasses;
        end
        counter = counter + 1;
    end
end

%write the fluxVector to Excel spreadsheet
if writeFiles
    tempModel = genericWD;
    T = table(tempModel.rxns,...
              constructEquations(tempModel,tempModel.rxns,true),...
              tempModel.grRules,...
              tempModel.subSystems);
    T2 = array2table(fluxVector);
    T = [T T2];
    colheads = {'ID','EQUATION','GENEASSOCIATION','SUBSYSTEM'};
    colheads = [colheads modelNames];
    T.Properties.VariableNames = colheads;
    writetable(T,'output/FBA/FBA.xlsx','Sheet',experiment_name,'WriteVariableNames',true);
end

%% COHORT 2 

conditions = {'DEN_fasted','DEN_fed'};
experiment_name = 'PT_T';
FBA = 1;
sFBA = 0;
pFBA = 0;
writeFiles = 1;

% vectors and structures
fluxVector = zeros(length(PT_T.rxns),length(conditions));
fluxVectorSparse = zeros(length(PT_T.rxns),length(conditions));

for i=1:length(conditions)
    model = PT_T;
    model = constrainReactions(model,'GEM/Eflux/multi_tissue/'+string(conditions{i})+'.csv',1);
    [raw,flag]=loadSheet(loadWorkbook('GEM/CONSTRAINTS.xlsx'),char(conditions{i}));
    raw = cell2table(raw);
    raw.raw5 = [];
    raw.Properties.VariableNames = raw{1,:};
    raw(1,:) = [];

    % block exchange reaction uptake
    [selExc, selUpt] = findExcRxns(model);
    toBlock = union(model.rxns(selUpt),model.rxns(selExc));
    model = setParam(model,'lb',toBlock,0);

    obj = {};
    for j=1:length(raw.Reaction)
        if raw.OBJ{j}
            obj{end+1} = raw.Reaction{j};
        else
            model = setParam(model,'lb',raw.Reaction{j},raw.LB{j});
            model = setParam(model,'ub',raw.Reaction{j},raw.UB{j});
        end
    end
    
    model = setParam(model,'obj',obj,1);
    
    if FBA
        fba = solveLP(model,1);
        fluxVector(:,i) = fba.x;
        disp(fba.f);
    end
    if sFBA
        sfba = optimizeCbModel(model,'max','zero');
        fluxVectorSparse(:,i) = sfba.x;
    end
end

%write the fluxVector to Excel spreadsheet
if writeFiles
    tempModel = PT_T;
    T = table(tempModel.rxns,...
              constructEquations(tempModel,tempModel.rxns,true),...
              tempModel.grRules,...
              tempModel.subSystems);
    T2 = array2table(fluxVector);
    T = [T T2];
    colheads = {'ID','EQUATION','GENEASSOCIATION','SUBSYSTEM'};
    colheads = [colheads conditions];
    T.Properties.VariableNames = colheads;
    writetable(T,'output/FBA/FBA.xlsx','Sheet',experiment_name,'WriteVariableNames',true);
end

%% SAVE STRUCTURES 

% tasks.ok = taskVector;
% tasks.taskName = taskReport.description;
% addpath(genpath('output/'));
% save('output/matlab/hepatocyteTasks.mat','tasks','-v7.3');

save('output/matlab/randomSampling.mat','randomSamplingStruct');
%,'-v7.3'

%% 
% add exchange reactions for all extracellular metabolites
% model = liverModel;
% [selExc, selUpt] = findExcRxns(model);
% exchRxns = unique([model.rxns(selExc);model.rxns(selUpt)]);
% model = removeReactions(model,exchRxns,true,true,false);
% compartmentMetabolites = findMetFromCompartment(model,'[s]');
% [model, addedRxns] = addExchangeRxns(model,'both',compartmentMetabolites);
% idx = cellfun(@isempty,model.subSystems);
% model.subSystems(idx) = {'Exchange reactions'};
% exportToExcelFormat(model,'GEM/Liver/newModel.xlsx');

%% CREATE MULTI-TISSUE MODEL

liverModel = importExcelModel('GEM/Liver/newModel.xlsx',false);
rxnsToDelete = {'AATAi','HMR_6404','PSERT'};
liverModel = removeReactions(liverModel,rxnsToDelete,true,true,true);

liver = liverModel;
model_prefix = 'pt_';
liver.rxns = strcat(model_prefix,liver.rxns);
liver.rxnNames = strcat(model_prefix,liver.rxnNames);
liver.mets = strrep(liver.mets,'[',strcat('[',model_prefix));
liver.comps = strcat(model_prefix,liver.comps);
liver.compNames = strcat(model_prefix,liver.compNames);
liver.subSystems = string(liver.subSystems);
liver.subSystems = strcat(model_prefix,liver.subSystems);

tumour = liverModel;
model_prefix = 't_';
tumour.rxns = strcat(model_prefix,tumour.rxns);
tumour.rxnNames = strcat(model_prefix,tumour.rxnNames);
tumour.mets = strrep(tumour.mets,'[',strcat('[',model_prefix));
tumour.comps = strcat(model_prefix,tumour.comps);
tumour.compNames = strcat(model_prefix,tumour.compNames);
tumour.subSystems = string(tumour.subSystems);
tumour.subSystems = strcat(model_prefix,tumour.subSystems);

pt_t = mergeModels({liver,tumour});
exportToExcelFormat(pt_t,'GEM/Liver/PT_T.xlsx');

